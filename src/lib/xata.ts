// Generated by Xata Codegen 0.28.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "images",
    columns: [
      { name: "asset_id", type: "string" },
      { name: "public_id", type: "string" },
      { name: "signature", type: "string" },
      { name: "width", type: "int" },
      { name: "height", type: "int" },
      { name: "format", type: "string" },
      { name: "bytes", type: "int" },
      { name: "url", type: "string" },
      { name: "extension", type: "string" },
      { name: "filename", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Images = InferredTypes["images"];
export type ImagesRecord = Images & XataRecord;

export type DatabaseSchema = {
  images: ImagesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions: BaseClientOptions = {
  databaseURL:
    "https://Arif-Sardar-s-workspace-focbde.us-east-1.xata.sh/db/nuronexul",
  apiKey: process.env.NEXT_PUBLIC_XATA_API_KEY,
  enableBrowser: true,
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
